// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"model/dao"
)

func newBaisc(db *gorm.DB, opts ...gen.DOOption) baisc {
	_baisc := baisc{}

	_baisc.baiscDo.UseDB(db, opts...)
	_baisc.baiscDo.UseModel(&dao.Baisc{})

	tableName := _baisc.baiscDo.TableName()
	_baisc.ALL = field.NewAsterisk(tableName)
	_baisc.ID = field.NewInt32(tableName, "id")
	_baisc.CreatedTime = field.NewTime(tableName, "created_time")
	_baisc.UpdatedTime = field.NewTime(tableName, "updated_time")

	_baisc.fillFieldMap()

	return _baisc
}

type baisc struct {
	baiscDo

	ALL         field.Asterisk
	ID          field.Int32 // 主键
	CreatedTime field.Time  // 创建时间
	UpdatedTime field.Time  // 更新时间

	fieldMap map[string]field.Expr
}

func (b baisc) Table(newTableName string) *baisc {
	b.baiscDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b baisc) As(alias string) *baisc {
	b.baiscDo.DO = *(b.baiscDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *baisc) updateTableName(table string) *baisc {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt32(table, "id")
	b.CreatedTime = field.NewTime(table, "created_time")
	b.UpdatedTime = field.NewTime(table, "updated_time")

	b.fillFieldMap()

	return b
}

func (b *baisc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *baisc) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 3)
	b.fieldMap["id"] = b.ID
	b.fieldMap["created_time"] = b.CreatedTime
	b.fieldMap["updated_time"] = b.UpdatedTime
}

func (b baisc) clone(db *gorm.DB) baisc {
	b.baiscDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b baisc) replaceDB(db *gorm.DB) baisc {
	b.baiscDo.ReplaceDB(db)
	return b
}

type baiscDo struct{ gen.DO }

type IBaiscDo interface {
	gen.SubQuery
	Debug() IBaiscDo
	WithContext(ctx context.Context) IBaiscDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBaiscDo
	WriteDB() IBaiscDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBaiscDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBaiscDo
	Not(conds ...gen.Condition) IBaiscDo
	Or(conds ...gen.Condition) IBaiscDo
	Select(conds ...field.Expr) IBaiscDo
	Where(conds ...gen.Condition) IBaiscDo
	Order(conds ...field.Expr) IBaiscDo
	Distinct(cols ...field.Expr) IBaiscDo
	Omit(cols ...field.Expr) IBaiscDo
	Join(table schema.Tabler, on ...field.Expr) IBaiscDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBaiscDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBaiscDo
	Group(cols ...field.Expr) IBaiscDo
	Having(conds ...gen.Condition) IBaiscDo
	Limit(limit int) IBaiscDo
	Offset(offset int) IBaiscDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBaiscDo
	Unscoped() IBaiscDo
	Create(values ...*dao.Baisc) error
	CreateInBatches(values []*dao.Baisc, batchSize int) error
	Save(values ...*dao.Baisc) error
	First() (*dao.Baisc, error)
	Take() (*dao.Baisc, error)
	Last() (*dao.Baisc, error)
	Find() ([]*dao.Baisc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.Baisc, err error)
	FindInBatches(result *[]*dao.Baisc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dao.Baisc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBaiscDo
	Assign(attrs ...field.AssignExpr) IBaiscDo
	Joins(fields ...field.RelationField) IBaiscDo
	Preload(fields ...field.RelationField) IBaiscDo
	FirstOrInit() (*dao.Baisc, error)
	FirstOrCreate() (*dao.Baisc, error)
	FindByPage(offset int, limit int) (result []*dao.Baisc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBaiscDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b baiscDo) Debug() IBaiscDo {
	return b.withDO(b.DO.Debug())
}

func (b baiscDo) WithContext(ctx context.Context) IBaiscDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b baiscDo) ReadDB() IBaiscDo {
	return b.Clauses(dbresolver.Read)
}

func (b baiscDo) WriteDB() IBaiscDo {
	return b.Clauses(dbresolver.Write)
}

func (b baiscDo) Session(config *gorm.Session) IBaiscDo {
	return b.withDO(b.DO.Session(config))
}

func (b baiscDo) Clauses(conds ...clause.Expression) IBaiscDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b baiscDo) Returning(value interface{}, columns ...string) IBaiscDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b baiscDo) Not(conds ...gen.Condition) IBaiscDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b baiscDo) Or(conds ...gen.Condition) IBaiscDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b baiscDo) Select(conds ...field.Expr) IBaiscDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b baiscDo) Where(conds ...gen.Condition) IBaiscDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b baiscDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBaiscDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b baiscDo) Order(conds ...field.Expr) IBaiscDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b baiscDo) Distinct(cols ...field.Expr) IBaiscDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b baiscDo) Omit(cols ...field.Expr) IBaiscDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b baiscDo) Join(table schema.Tabler, on ...field.Expr) IBaiscDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b baiscDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBaiscDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b baiscDo) RightJoin(table schema.Tabler, on ...field.Expr) IBaiscDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b baiscDo) Group(cols ...field.Expr) IBaiscDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b baiscDo) Having(conds ...gen.Condition) IBaiscDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b baiscDo) Limit(limit int) IBaiscDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b baiscDo) Offset(offset int) IBaiscDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b baiscDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBaiscDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b baiscDo) Unscoped() IBaiscDo {
	return b.withDO(b.DO.Unscoped())
}

func (b baiscDo) Create(values ...*dao.Baisc) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b baiscDo) CreateInBatches(values []*dao.Baisc, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b baiscDo) Save(values ...*dao.Baisc) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b baiscDo) First() (*dao.Baisc, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Baisc), nil
	}
}

func (b baiscDo) Take() (*dao.Baisc, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Baisc), nil
	}
}

func (b baiscDo) Last() (*dao.Baisc, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Baisc), nil
	}
}

func (b baiscDo) Find() ([]*dao.Baisc, error) {
	result, err := b.DO.Find()
	return result.([]*dao.Baisc), err
}

func (b baiscDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.Baisc, err error) {
	buf := make([]*dao.Baisc, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b baiscDo) FindInBatches(result *[]*dao.Baisc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b baiscDo) Attrs(attrs ...field.AssignExpr) IBaiscDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b baiscDo) Assign(attrs ...field.AssignExpr) IBaiscDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b baiscDo) Joins(fields ...field.RelationField) IBaiscDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b baiscDo) Preload(fields ...field.RelationField) IBaiscDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b baiscDo) FirstOrInit() (*dao.Baisc, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Baisc), nil
	}
}

func (b baiscDo) FirstOrCreate() (*dao.Baisc, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Baisc), nil
	}
}

func (b baiscDo) FindByPage(offset int, limit int) (result []*dao.Baisc, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b baiscDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b baiscDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b baiscDo) Delete(models ...*dao.Baisc) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *baiscDo) withDO(do gen.Dao) *baiscDo {
	b.DO = *do.(*gen.DO)
	return b
}
